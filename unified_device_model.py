#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Unified Device Model - Ortak JSON schema ve data model
Normal Tarama ve Geli≈ümi≈ü Analiz i√ßin birle≈üik veri yapƒ±sƒ±
"""

import json
from datetime import datetime
from typing import Dict, List, Any, Optional

class UnifiedDeviceModel:
    """
    Unified Device Model - T√ºm scan metodlarƒ± i√ßin ortak veri modeli
    """
    
    def __init__(self):
        self.unified_schema = {
            # Core device information
            "ip": "",
            "mac": "",
            "hostname": "",
            "vendor": "",
            "device_type": "",
            "status": "online",  # online, offline
            "last_seen": "",
            
            # User-defined information
            "alias": "",
            "notes": "",
            
            # Unified port structure
            "open_ports": [],
            
            # Unified analysis data container
            "analysis_data": {
                "last_normal_scan": None,
                "last_enhanced_analysis": None,
                "normal_scan_info": {},
                "enhanced_analysis_info": {}
            },
            
            # Backward compatibility fields
            "enhanced_info": None,
            "enhanced_comprehensive_info": None,
            "advanced_scan_summary": None,
            "last_enhanced_analysis": None
        }
    
    def create_unified_device(self, ip: str, mac: str, **kwargs) -> Dict[str, Any]:
        """Unified device object olu≈ütur"""
        device = self.unified_schema.copy()
        device.update({
            "ip": ip,
            "mac": mac,
            "last_seen": datetime.now().isoformat(),
            "analysis_data": {
                "last_normal_scan": None,
                "last_enhanced_analysis": None,
                "normal_scan_info": {},
                "enhanced_analysis_info": {}
            }
        })
        
        # Ek parametreleri ekle
        for key, value in kwargs.items():
            if key in device:
                device[key] = value
        
        return device
    
    def create_unified_port(self, port: int, **kwargs) -> Dict[str, Any]:
        """Unified port object olu≈ütur"""
        port_obj = {
            "port": port,
            "service": kwargs.get("service", "unknown"),
            "state": kwargs.get("state", "open"),
            "version": kwargs.get("version", ""),
            "product": kwargs.get("product", ""),
            "description": kwargs.get("description", ""),
            "manual": kwargs.get("manual", False),
            "source": kwargs.get("source", "port_scan"),  # normal_scan, enhanced_analysis, manual
            "last_verified": datetime.now().isoformat()
        }
        return port_obj
    
    def merge_device_data(self, existing_device: Dict[str, Any], new_device: Dict[str, Any], 
                         scan_type: str = "normal_scan") -> Dict[str, Any]:
        """
        Mevcut cihaz verileri ile yeni tarama sonu√ßlarƒ±nƒ± birle≈ütir
        scan_type: "normal_scan" or "enhanced_analysis"
        """
        if not existing_device:
            return new_device
        
        # MAC+IP kombinasyonu kontrol et
        existing_mac = existing_device.get('mac', '').lower()
        new_mac = new_device.get('mac', '').lower()
        existing_ip = existing_device.get('ip', '')
        new_ip = new_device.get('ip', '')
        
        # MAC+IP kombinasyonu aynƒ± olmalƒ± merge i√ßin
        if existing_mac != new_mac or existing_ip != new_ip:
            print(f"‚ö†Ô∏è MAC+IP mismatch: {existing_mac}@{existing_ip} != {new_mac}@{new_ip} - farklƒ± cihazlar, merge edilmiyor")
            return new_device
        
        print(f"üîÑ MAC+IP match: {existing_mac}@{existing_ip} - merging data")
        
        # Temel bilgileri g√ºncelle
        merged = existing_device.copy()
        
        # Core fields'ƒ± g√ºncelle (IP ve MAC'i koruyarak)
        core_fields = ["hostname", "vendor", "status", "last_seen"]
        for field in core_fields:
            if field in new_device and new_device[field]:
                merged[field] = new_device[field]
        
        # User-defined fields'ƒ± koru - Mevcut deƒüerleri √ñNCELƒ∞KLE koru
        user_fields = ["alias", "notes", "device_type"]
        for field in user_fields:
            if field in existing_device and existing_device[field]:
                # Mevcut deƒüer varsa onu koru (kullanƒ±cƒ± tanƒ±mlƒ±)
                merged[field] = existing_device[field]
            elif field in new_device and new_device[field]:
                # Mevcut deƒüer yoksa yeni deƒüeri kullan
                merged[field] = new_device[field]
            else:
                # Her ikisinde de deƒüer yoksa bo≈ü string
                merged[field] = ""
        
        # Analysis data'yƒ± g√ºncelle
        if "analysis_data" not in merged:
            merged["analysis_data"] = {
                "last_normal_scan": None,
                "last_enhanced_analysis": None,
                "normal_scan_info": {},
                "enhanced_analysis_info": {}
            }
        
        # Scan type'a g√∂re analysis data'yƒ± g√ºncelle
        if scan_type == "normal_scan":
            merged["analysis_data"]["last_normal_scan"] = datetime.now().isoformat()
            if "analysis_data" in new_device and "normal_scan_info" in new_device["analysis_data"]:
                merged["analysis_data"]["normal_scan_info"] = new_device["analysis_data"]["normal_scan_info"]
        elif scan_type == "enhanced_analysis":
            merged["analysis_data"]["last_enhanced_analysis"] = datetime.now().isoformat()
            if "analysis_data" in new_device and "enhanced_analysis_info" in new_device["analysis_data"]:
                merged["analysis_data"]["enhanced_analysis_info"] = new_device["analysis_data"]["enhanced_analysis_info"]
        
        # Port'larƒ± birle≈ütir
        merged["open_ports"] = self.merge_ports(
            existing_device.get("open_ports", []),
            new_device.get("open_ports", []),
            scan_type
        )
        
        # Encrypted credentials'larƒ± koru (√ßok √∂nemli!)
        if "encrypted_credentials" in existing_device:
            merged["encrypted_credentials"] = existing_device["encrypted_credentials"]
        
        return merged
    
    def merge_ports(self, existing_ports: List[Dict], new_ports: List[Dict], 
                   scan_type: str) -> List[Dict]:
        """Port listelerini birle≈ütir"""
        merged_ports = {}
        
        # Mevcut port'larƒ± ekle
        for port in existing_ports:
            port_num = port.get("port")
            if port_num:
                merged_ports[port_num] = port.copy()
        
        # Yeni port'larƒ± ekle/g√ºncelle
        for port in new_ports:
            port_num = port.get("port")
            if port_num:
                if port_num in merged_ports:
                    # Mevcut port'u g√ºncelle
                    existing_port = merged_ports[port_num]
                    
                    # Manuel port'larƒ± koru
                    if existing_port.get("manual", False):
                        continue
                    
                    # Daha detaylƒ± bilgiyi koru
                    if port.get("version") and not existing_port.get("version"):
                        existing_port["version"] = port["version"]
                    if port.get("product") and not existing_port.get("product"):
                        existing_port["product"] = port["product"]
                    if port.get("description") and not existing_port.get("description"):
                        existing_port["description"] = port["description"]
                    
                    # Source'u g√ºncelle
                    existing_port["source"] = port.get("source", scan_type)
                    existing_port["last_verified"] = datetime.now().isoformat()
                else:
                    # Yeni port ekle
                    new_port = port.copy()
                    new_port["source"] = port.get("source", scan_type)
                    new_port["last_verified"] = datetime.now().isoformat()
                    merged_ports[port_num] = new_port
        
        return list(merged_ports.values())
    
    def migrate_legacy_data(self, legacy_device: Dict[str, Any]) -> Dict[str, Any]:
        """Legacy format'tan unified format'a ge√ßi≈ü"""
        unified_device = self.create_unified_device(
            legacy_device.get("ip", ""),
            legacy_device.get("mac", "")
        )
        
        # Temel bilgileri kopyala
        basic_fields = ["hostname", "vendor", "device_type", "status", "last_seen", "alias", "notes"]
        for field in basic_fields:
            if field in legacy_device:
                unified_device[field] = legacy_device[field]
        
        # Port'larƒ± d√∂n√º≈üt√ºr
        if "open_ports" in legacy_device:
            unified_ports = []
            for port in legacy_device["open_ports"]:
                unified_port = self.create_unified_port(
                    port.get("port", 0),
                    service=port.get("service", port.get("description", "unknown")),
                    state=port.get("state", "open"),
                    version=port.get("version", ""),
                    product=port.get("product", ""),
                    description=port.get("description", ""),
                    manual=port.get("manual", False),
                    source=port.get("source", "legacy")
                )
                unified_ports.append(unified_port)
            unified_device["open_ports"] = unified_ports
        
        # Legacy analysis data'yƒ± migrate et
        analysis_data = {
            "last_normal_scan": None,
            "last_enhanced_analysis": None,
            "normal_scan_info": {},
            "enhanced_analysis_info": {}
        }
        
        # Enhanced info'yu migrate et
        if "enhanced_info" in legacy_device and legacy_device["enhanced_info"]:
            analysis_data["normal_scan_info"] = legacy_device["enhanced_info"]
            analysis_data["last_normal_scan"] = legacy_device.get("last_seen")
        
        # Enhanced comprehensive info'yu migrate et
        if "enhanced_comprehensive_info" in legacy_device and legacy_device["enhanced_comprehensive_info"]:
            analysis_data["enhanced_analysis_info"] = legacy_device["enhanced_comprehensive_info"]
            analysis_data["last_enhanced_analysis"] = legacy_device.get("last_enhanced_analysis")
        
        # Advanced scan summary'yi migrate et
        if "advanced_scan_summary" in legacy_device and legacy_device["advanced_scan_summary"]:
            if not analysis_data["enhanced_analysis_info"]:
                analysis_data["enhanced_analysis_info"] = legacy_device["advanced_scan_summary"]
        
        unified_device["analysis_data"] = analysis_data
        
        # Backward compatibility i√ßin legacy field'larƒ± koru
        unified_device["enhanced_info"] = legacy_device.get("enhanced_info")
        unified_device["enhanced_comprehensive_info"] = legacy_device.get("enhanced_comprehensive_info")
        unified_device["advanced_scan_summary"] = legacy_device.get("advanced_scan_summary")
        unified_device["last_enhanced_analysis"] = legacy_device.get("last_enhanced_analysis")
        
        return unified_device
    
    def validate_device_schema(self, device: Dict[str, Any]) -> bool:
        """Device schema'sƒ±nƒ± validate et"""
        required_fields = ["ip", "mac", "hostname", "vendor", "device_type", "open_ports", "analysis_data"]
        
        for field in required_fields:
            if field not in device:
                return False
        
        # Analysis data structure kontrol√º
        if "analysis_data" in device:
            analysis_data = device["analysis_data"]
            required_analysis_fields = ["last_normal_scan", "last_enhanced_analysis", 
                                      "normal_scan_info", "enhanced_analysis_info"]
            for field in required_analysis_fields:
                if field not in analysis_data:
                    return False
        
        return True
    
    def get_device_summary(self, device: Dict[str, Any]) -> Dict[str, Any]:
        """Device √∂zet bilgilerini d√∂nd√ºr"""
        summary = {
            "ip": device.get("ip"),
            "alias": device.get("alias", ""),
            "device_type": device.get("device_type", ""),
            "port_count": len(device.get("open_ports", [])),
            "last_seen": device.get("last_seen"),
            "status": device.get("status", "offline"),
            "has_normal_scan": False,
            "has_enhanced_analysis": False
        }
        
        if "analysis_data" in device:
            analysis_data = device["analysis_data"]
            summary["has_normal_scan"] = bool(analysis_data.get("last_normal_scan"))
            summary["has_enhanced_analysis"] = bool(analysis_data.get("last_enhanced_analysis"))
            summary["last_normal_scan"] = analysis_data.get("last_normal_scan")
            summary["last_enhanced_analysis"] = analysis_data.get("last_enhanced_analysis")
        
        return summary

# Global instance
unified_model = UnifiedDeviceModel()